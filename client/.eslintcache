[{"/Users/ahmedaldulaimy/Documents/mothership/client/src/index.js":"1","/Users/ahmedaldulaimy/Documents/mothership/client/src/useCannon.js":"2","/Users/ahmedaldulaimy/Documents/mothership/client/src/urls.js":"3"},{"size":19283,"mtime":1610959618427,"results":"4","hashOfConfig":"5"},{"size":1584,"mtime":1610850976931,"results":"6","hashOfConfig":"5"},{"size":323,"mtime":1610959972087,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":4,"source":"10","usedDeprecatedRules":"11"},"fmlb6u",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ahmedaldulaimy/Documents/mothership/client/src/index.js",["16","17","18","19","20","21","22","23","24","25","26","27","28"],"import ReactDOM from \"react-dom\"\nimport * as CANNON from \"cannon\";\nimport React, {Component, useRef, useState, useEffect} from \"react\"\nimport {Canvas, extend, useFrame, useThree, useLoader} from \"react-three-fiber\"\nimport {useDrag} from \"react-use-gesture\";\nimport * as THREE from 'three';\nimport {Provider, useCannon} from './useCannon';\nimport useEventListener from '@use-it/event-listener';\nimport {Html} from \"@react-three/drei\"\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./index.css\"\nimport URLs from \"./urls.js\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport {toast, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nlet humanNames = require('human-names');\n\n// import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nextend({ OrbitControls });\n\nlet initX;\nlet initY;\n\nfunction DraggableDodecahedron({ identity: identity, logPositionChange: logPositionChange, active: active, logSelection: logSelection}) {\n\n\n    const { camera, mouse } = useThree();\n\n    const [position, setPosition] = useState(identity.position);\n    const [key, _] = useState(identity.id);\n\n    const [hovered, setHover] = useState(false)\n\n    const [quaternion, setQuaternion] = useState([0, 0, 0, 0]);\n\n    const { ref, body } = useCannon({ bodyProps: { mass: 5 } }, body => {\n        body.addShape(new CANNON.Box(new CANNON.Vec3(1, 1, 1)))\n        body.position.set(...[position.x, position.y, position.z]);\n\n    }, []);\n    const bind = useDrag(({ event, offset: [,], xy: [x, y], first, last }) => {\n\n        const pos = get3DPosition({ screenX: mouse.x, screenY: mouse.y, camera });\n        const positionHasChanged = Math.abs(pos.x-initX) > 0.05 && Math.abs(pos.y-initY) > 0.05\n\n        if (first) {\n\n            body.mass = 0;\n            body.updateMassProperties();\n            initX = pos.x\n            initY = pos.y\n\n        } else if (last) {\n\n            body.mass = 5;\n            body.updateMassProperties();\n\n            if (positionHasChanged) {\n                logPositionChange(key, body.position)\n            }\n            else {\n                logSelection(key, identity)\n            }\n\n        }\n\n        if (!first && positionHasChanged) {\n            body.position.set(pos.x, pos.y, -0.7);\n        }\n\n    }, { pointerEvents: true });\n\n\n    useFrame(() => {\n        // Sync cannon body position with three js\n        const deltaX = Math.abs(body.position.x - position.x);\n        const deltaY = Math.abs(body.position.y - position.y);\n        const deltaZ = Math.abs(body.position.z - position.z);\n        if (deltaX > 0.001 || deltaY > 0.001 || deltaZ > 0.001) {\n            setPosition(body.position.clone());\n        }\n        const bodyQuaternion = body.quaternion.toArray();\n        const quaternionDelta = bodyQuaternion.map((n, idx) => Math.abs(n - quaternion[idx]))\n            .reduce((acc, curr) => acc + curr);\n        if (quaternionDelta > 0.01) {\n            setQuaternion(body.quaternion.toArray());\n        }\n    });\n\n    return (\n\n        <mesh onPointerOver={(e) => setHover(true)}\n              onPointerOut={(e) => setHover(false)}\n              ref={ref}\n              castShadow={true}\n              color={hovered ? 'blue' : identity.color}\n              receiveShadow={false}\n              position={[position.x, position.y, position.z]}\n              quaternion={quaternion} {...bind()}  onClick={e => {e.stopPropagation();}}>\n\n            <dodecahedronBufferGeometry attach=\"geometry\" />\n            <meshLambertMaterial attach=\"material\"  color={active ? 'blue' : identity.color}  />\n\n            <Html scaleFactor={50}>\n                <div class=\"content\">\n                    {identity.humanName}\n                </div>\n            </Html>\n\n        </mesh>\n\n    )\n}\n\nfunction Plane({ position, onPlaneClick }) {\n\n    const { ref } = useCannon({ bodyProps: { mass: 0 } }, body => {\n        body.addShape(new CANNON.Plane())\n        body.position.set(...position)\n    })\n    return (\n        <mesh ref={ref} receiveShadow position={position}\n              onClick={onPlaneClick}>\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <meshPhongMaterial attach=\"material\" color=\"indianred\"/>\n        </mesh>\n    )\n\n}\n\n\nconst get3DPosition = ({ screenX, screenY, camera }) => {\n    var vector = new THREE.Vector3(screenX, screenY, 0.5);\n    vector.unproject(camera);\n    var dir = vector.sub(camera.position).normalize();\n    var distance = - camera.position.z / dir.z;\n    return camera.position.clone().add(dir.multiplyScalar(distance));\n};\n\nconst keyPressed = {\n};\n\n\nconst ConfigForm = ({ humanName, changeHumanName, name, color, changeColor, rating, changeRating, deleteObject}) => {\n\n    const onSubmit = data => console.log(data);\n\n    return (\n\n        <form onSubmit={onSubmit}>\n\n            <input type=\"text\" placeholder=\"Human Name\" name=\"Human Name\"  value={humanName || ''} onChange={e => changeHumanName(e.target.value)} />\n            <br/>\n            <input readOnly type=\"text\" placeholder=\"Object Key\" name=\"Object Key\"  value={name || ''}/>\n            <br/>\n\n            <select name=\"Color\" value={color || ''} onChange={e => changeColor(e.target.value)}>\n                <option value=\"white\">White</option>\n                <option value=\"hotpink\">Pink</option>\n                <option value=\"lightgreen\">Green</option>\n            </select>\n\n            <br/>\n\n            <input type=\"range\" placeholder=\"Rating\" name=\"Rating\"  value={rating || ''} onChange={e => changeRating(e.target.value)} />\n\n            <br/>\n\n            <button  type=\"button\" onClick={deleteObject}>\n                Delete\n            </button>\n\n            {/*<input type=\"submit\" />*/}\n        </form>\n\n    );\n}\n\n\n\n\nfunction Index(props) {\n\n    const { mouse, camera } = useThree();\n\n\n    const onPlaneClick = (e) => {\n\n        const position = get3DPosition({ screenX: mouse.x, screenY: mouse.y, camera });\n\n        const addedObject = {\n            key: 10*Math.random()+\"\",\n            position: position,\n            humanName: humanNames.allRandomEn(),\n            color: \"white\"\n        }\n\n        // props.addObject(addedObject);\n\n        props.logCreation(addedObject);\n\n    };\n\n\n    // const handleKeyDown = (e) => {\n    //     if (!keyPressed[e.key]) {\n    //         keyPressed[e.key] = new Date().getTime();\n    //     }\n    // };\n    //\n    // const handleKeyUp = (e) => {\n    //     delete keyPressed[e.key];\n    // };\n\n    const mouseWheel = (e) => {\n        let delta = e.wheelDelta;\n        delta = delta / 240;\n        delta = -delta;\n        if (delta <= 0) {\n            delta -= camera.position.z * 0.1;\n        } else {\n            delta += camera.position.z * 0.1;\n        }\n        if (camera.position.z + delta > 1 && camera.position.z + delta < 200) {\n            camera.translateZ(delta);\n        }\n    };\n\n    // useEventListener('keydown', handleKeyDown);\n    // useEventListener('keyup', handleKeyUp);\n\n    useEventListener('wheel', mouseWheel);\n\n\n    // useFrame((_, delta) => {\n    //     // move camera according to key pressed\n    //     Object.entries(keyPressed).forEach((e) => {\n    //         const [key, start] = e;\n    //         const duration = new Date().getTime() - start;\n    //\n    //         // increase momentum if key pressed longer\n    //         let momentum = Math.sqrt(duration + 200) * 0.01 + 0.05;\n    //\n    //         // adjust for actual time passed\n    //         momentum = momentum * delta / 0.016;\n    //\n    //         // increase momentum if camera higher\n    //         momentum = momentum + camera.position.z * 0.02;\n    //\n    //         switch (key) {\n    //             case 'w': camera.translateY(momentum); break;\n    //             case 's': camera.translateY(-momentum); break;\n    //             case 'd': camera.translateX(momentum); break;\n    //             case 'a': camera.translateX(-momentum); break;\n    //             default:\n    //         }\n    //     });\n    // });\n\n\n\n    const CameraControls = () => {\n        // Get a reference to the Three.js Camera, and the canvas html element.\n        // We need these to setup the OrbitControls component.\n        // https://threejs.org/docs/#examples/en/controls/OrbitControls\n        const {\n            camera,\n            gl: { domElement },\n        } = useThree();\n        // Ref to the controls, so that we can update them on every frame using useFrame\n        const controls = useRef();\n        useFrame((state) => controls.current.update());\n        // console.log(camera.position)\n        return <orbitControls ref={controls} args={[camera, domElement]} />;\n    };\n\n    return <React.Fragment >\n\n        {/*<CameraControls />*/}\n\n        <ambientLight  intensity={0.75} />\n        <spotLight  castShadow={true} intensity={0.8} position={[0, -50, 200]} angle={Math.PI / 15} penumbra={1} />\n\n        <Provider>\n\n            {props.objects.map((t) => (\n                <DraggableDodecahedron  key={t.id}\n                                        identity={t}\n                                        active={t.id === props.chosen}\n                                        logPositionChange={props.logPositionChange}\n                                        logSelection={props.logSelection}  />\n            ))}\n\n            <Plane position={[0, 0, -5]} onPlaneClick={onPlaneClick} />\n\n        </Provider>\n\n    </React.Fragment>\n\n};\n\n\nfunction unboxAPIConfigObject(objData){\n\n    if (objData._id && objData.humanName && objData.position && objData.color){\n        return {\n            id: objData._id,\n            position: objData.position,\n            humanName: objData.humanName,\n            color: objData.color\n        }\n    }\n    else {\n        return;\n    }\n\n}\n\n\n//socket.io connection\nconst socket = io(`${URLs.socketURL}`);\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            objects: [],\n            chosen: 0,\n            humanName: \"\",\n            color: \"\",\n            rating: 0,\n        };\n\n    }\n\n\n    async fetchObjects() {\n\n\n        console.log(\"Fetching objects\")\n\n        try {\n            const response = await axios.get(\n                `${URLs.baseURL}`,\n            );\n\n            if (response.status === 200) {\n                // console.log(response.data);\n\n                var objects = response.data.map((t) => (\n                    unboxAPIConfigObject(t)\n                ))\n\n                objects = objects.filter(function (el) {\n                    return el != null;\n                });\n\n                // console.log(\"Fetched objects\", objects)\n\n                this.setState(({\n                    objects: objects,\n                }));\n\n                // toast.dark('Loaded All Objects');\n\n            } else {\n                alert(response.data.message);\n            }\n        } catch (error) {\n            console.log(\"Error with fetching: \", error);\n            alert(\n                \"Error with fetching. Please check the console for more info.\"\n            );\n        }\n\n    }\n\n    componentDidMount = async () => {\n\n        // const realtimeUpdate = {\n        //     type: change.operationType,\n        //     id: change.documentKey._id,\n        //     document: null,\n        //     updatedFields: null,\n        // }\n\n        await this.fetchObjects();\n\n        socket.on(\"newRobot\", (realtimeUpdate) => {\n\n            console.log(\"got new robot from server\", realtimeUpdate)\n\n            const objData = realtimeUpdate.document\n\n            const newObj = {\n                id: objData._id,\n                position: objData.position,\n                humanName: objData.humanName,\n                color: objData.color\n            }\n\n            toast.dark('Created '+newObj.humanName);\n\n            this.setState(state => ({\n                objects: [...state.objects, newObj],\n            }));\n\n\n        });\n\n        socket.on(\"deletedRobot\", (realtimeUpdate) => {\n\n\n            let objects = [...this.state.objects];\n            let index = 0;\n\n            let _ = objects.find((o, i) => {\n                if (o.id === realtimeUpdate.id) {\n\n                    index = i;\n                    return true; // stop searching\n                }\n            });\n\n            const item = objects.splice(index, 1)[0]\n\n            this.setState({ objects: objects }, function() {\n\n                if (item.id === this.state.chosen) {\n\n                    this.setState({\n                        chosen: \"\",\n                        humanName: \"\",\n                        color: \"\",\n                        rating: 0\n                    });\n\n                }\n\n                toast.warn('Deleted '+item.humanName);\n\n            });\n\n\n        });\n\n        socket.on(\"modifiedRobot\", (realtimeUpdate) => {\n\n            let objects = [...this.state.objects];\n            let index = 0;\n\n            let _ = objects.find((o, i) => {\n                if (o.id === realtimeUpdate.id) {\n\n                    let item = {...objects[i]};\n                    // console.log(\"before \", objects[i])\n                    item = {...item, ...realtimeUpdate.updatedFields}\n                    objects[i] = item;\n                    index = i;\n                    return true; // stop searching\n                }\n            });\n\n            const item = objects.splice(index, 1)[0]\n\n            this.setState({ objects: objects }, function() {\n\n                if (item.id === this.state.chosen) {\n\n                    this.setState({\n                        objects: [...objects, item],\n                        chosen: item.id,\n                        humanName: item.humanName,\n                        color: item.color,\n                        rating: item.rating\n                    }, function (){\n                        toast.dark('Modified '+item.humanName);\n                    });\n\n                }\n\n                else {\n                    this.setState({objects: [...objects, item]}, function (){\n                        toast.dark('Modified '+item.humanName);\n                    });\n                }\n\n            });\n\n        });\n\n    };\n\n\n\n\n    logSelection =  (key, identity) => {\n        console.log(key, \"now selected\")\n\n        this.setState(({\n            chosen: key,\n            humanName: identity.humanName,\n            color: identity.color,\n            rating: identity.rating\n        }));\n\n    }\n\n\n\n\n    logPositionChange = async (key, position) => {\n        console.log(key, \"changed\", position)\n\n        try {\n            const response = await axios.put(\n                `${URLs.baseURL}\\\\${key}`,\n                {\n                    position: position\n                }\n            );\n\n            if (response.data.success) {\n                // alert(\"created\", response.data);\n            } else {\n                // alert(response.data.message);\n            }\n        } catch (error) {\n            console.log(\"Error with adding thought: \", error);\n            alert(\n                \"Error with adding thought. Please check the console for more info.\"\n            );\n        }\n\n    }\n\n\n    logCreation = async (newObj) => {\n\n        try {\n            const response = await axios.post(\n                `${URLs.baseURL}`,\n                {\n                    humanName: newObj.humanName,\n                    color: newObj.color,\n                    position: newObj.position,\n                }\n            );\n\n            if (response.data.success) {\n                // alert(\"created\", response.data);\n            } else {\n                // alert(response.data.message);\n            }\n        } catch (error) {\n            console.log(\"Error with adding thought: \", error);\n            alert(\n                \"Error with adding thought. Please check the console for more info.\"\n            );\n        }\n\n    }\n\n\n    async deleteObject() {\n\n        try {\n\n            const response = await axios.delete(\n                `${URLs.baseURL}\\\\${this.state.chosen}`\n            );\n\n            if (response.data.success) {\n                // alert(\"created\", response.data);\n            } else {\n                // alert(response.data.message);\n            }\n\n        } catch (error) {\n            console.log(\"Error with adding thought: \", error);\n            // alert(\"Error with adding thought. Please check the console for more info.\");\n        }\n\n    }\n\n    async updateObject(prop) {\n\n        try {\n            const response = await axios.put(\n                `${URLs.baseURL}\\\\${prop.key}`,\n                {\n                    humanName: prop.humanName,\n                    color: prop.color,\n                    rating: prop.rating,\n                }\n            );\n\n            if (response.data.success) {\n                // alert(\"created\", response.data);\n            } else {\n                // alert(response.data.message);\n            }\n\n        } catch (error) {\n            console.log(\"Error with adding thought: \", error);\n            // alert(\"Error with adding thought. Please check the console for more info.\");\n        }\n\n    }\n\n    changeHumanName = (newName) => {\n        this.updateObject({key: this.state.chosen, humanName: newName })\n    }\n\n    changeColor = (newColor) => {\n        this.updateObject({key: this.state.chosen, color: newColor })\n    }\n\n    changeRating = (newRating) => {\n        this.updateObject({key: this.state.chosen, rating: newRating })\n    }\n\n\n\n\n    render() {\n        return (\n            <>\n\n                <Canvas camera={{fov: 45, position:[0, -70, 30]}}\n                        onCreated={({ gl }) => {\n                            gl.setPixelRatio(window.devicePixelRatio || 2)\n                            gl.shadowMap.enabled = true;\n                            gl.shadowMap.type = THREE.PCFSoftShadowMap;\n                        }}>\n\n                    <Index chosen={this.state.chosen}\n                           objects={this.state.objects}\n                           logPositionChange={this.logPositionChange.bind(this)}\n                           logSelection={this.logSelection.bind(this)}\n                           logCreation={this.logCreation.bind(this)}\n                    />\n\n                </Canvas>\n\n\n                <ConfigForm name={this.state.chosen}\n                            humanName={this.state.humanName}\n                            changeHumanName={this.changeHumanName.bind(this)}\n                            color={this.state.color}\n                            changeColor={this.changeColor.bind(this)}\n                            rating={this.state.rating}\n                            changeRating={this.changeRating.bind(this)}\n                            deleteObject={this.deleteObject.bind(this)}\n                />\n\n                <ToastContainer\n                    position=\"top-right\"\n                    autoClose={2000}\n                    hideProgressBar={false}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss={false}\n                    draggable\n                    pauseOnHover\n                />\n\n            </>\n        );\n    }\n\n\n}\n\n\nif (module.hot) {\n    module.hot.accept()\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n)\n\n",["29","30"],"/Users/ahmedaldulaimy/Documents/mothership/client/src/useCannon.js",[],"/Users/ahmedaldulaimy/Documents/mothership/client/src/urls.js",[],{"ruleId":"31","severity":1,"message":"32","line":3,"column":45,"nodeType":"33","messageId":"34","endLine":3,"endColumn":54},{"ruleId":"31","severity":1,"message":"35","line":4,"column":45,"nodeType":"33","messageId":"34","endLine":4,"endColumn":54},{"ruleId":"36","severity":1,"message":"37","line":27,"column":34,"nodeType":"38","messageId":"39","endLine":27,"endColumn":52,"fix":"40"},{"ruleId":"36","severity":1,"message":"41","line":27,"column":54,"nodeType":"38","messageId":"39","endLine":27,"endColumn":90,"fix":"42"},{"ruleId":"36","severity":1,"message":"43","line":27,"column":92,"nodeType":"38","messageId":"39","endLine":27,"endColumn":106,"fix":"44"},{"ruleId":"36","severity":1,"message":"45","line":27,"column":108,"nodeType":"38","messageId":"39","endLine":27,"endColumn":134,"fix":"46"},{"ruleId":"31","severity":1,"message":"47","line":33,"column":17,"nodeType":"33","messageId":"34","endLine":33,"endColumn":18},{"ruleId":"31","severity":1,"message":"48","line":143,"column":7,"nodeType":"33","messageId":"34","endLine":143,"endColumn":17},{"ruleId":"31","severity":1,"message":"49","line":265,"column":11,"nodeType":"33","messageId":"34","endLine":265,"endColumn":25},{"ruleId":"31","severity":1,"message":"47","line":423,"column":17,"nodeType":"33","messageId":"34","endLine":423,"endColumn":18},{"ruleId":"50","severity":1,"message":"51","line":423,"column":41,"nodeType":"52","messageId":"53","endLine":423,"endColumn":43},{"ruleId":"31","severity":1,"message":"47","line":458,"column":17,"nodeType":"33","messageId":"34","endLine":458,"endColumn":18},{"ruleId":"50","severity":1,"message":"51","line":458,"column":41,"nodeType":"52","messageId":"53","endLine":458,"endColumn":43},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useLoader' is defined but never used.","no-useless-rename","Destructuring assignment identity unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"58","text":"59"},"Destructuring assignment logPositionChange unnecessarily renamed.",{"range":"60","text":"61"},"Destructuring assignment active unnecessarily renamed.",{"range":"62","text":"63"},"Destructuring assignment logSelection unnecessarily renamed.",{"range":"64","text":"65"},"'_' is assigned a value but never used.","'keyPressed' is assigned a value but never used.","'CameraControls' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["66"],"no-negated-in-lhs",["67"],[920,938],"identity",[940,976],"logPositionChange",[978,992],"active",[994,1020],"logSelection","no-global-assign","no-unsafe-negation"]