[{"/Users/ahmedaldulaimy/Documents/mothership/client/src/index.js":"1","/Users/ahmedaldulaimy/Documents/mothership/client/src/useCannon.js":"2","/Users/ahmedaldulaimy/Documents/mothership/client/src/urls.js":"3","/Users/ahmedaldulaimy/Documents/mothership/client/src/serviceWorkerRegistration.js":"4"},{"size":19620,"mtime":1611029470836,"results":"5","hashOfConfig":"6"},{"size":1584,"mtime":1610850976931,"results":"7","hashOfConfig":"6"},{"size":323,"mtime":1611038908527,"results":"8","hashOfConfig":"6"},{"size":5064,"mtime":1611023570669,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"fmlb6u",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ahmedaldulaimy/Documents/mothership/client/src/index.js",["20","21","22","23","24","25","26","27"],"import ReactDOM from \"react-dom\";\nimport * as CANNON from \"cannon\";\nimport React, { Component, useRef, useState } from \"react\";\nimport { Canvas, extend, useFrame, useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport * as THREE from \"three\";\nimport { Provider, useCannon } from \"./useCannon\";\nimport useEventListener from \"@use-it/event-listener\";\nimport { Html } from \"@react-three/drei\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./index.css\";\nimport URLs from \"./urls.js\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { isBrowser } from \"react-device-detect\";\nimport Switch from \"react-switch\";\nimport LoadingScreen from \"react-loading-screen\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nlet humanNames = require(\"human-names\");\nextend({ OrbitControls });\n\n//socket.io connection\nconst socket = io(`${URLs.socketURL}`);\n\nlet initX;\nlet initY;\n\nfunction DraggableDodecahedron(props) {\n    const { camera, mouse } = useThree();\n\n    const [position, setPosition] = useState(props.identity.position);\n    const [key, _] = useState(props.identity.id);\n\n    const [hovered, setHover] = useState(false);\n\n    const [quaternion, setQuaternion] = useState([0, 0, 0, 0]);\n\n    const { ref, body } = useCannon(\n        { bodyProps: { mass: 5 } },\n        (body) => {\n            body.addShape(new CANNON.Box(new CANNON.Vec3(1, 1, 1)));\n            body.position.set(...[position.x, position.y, position.z]);\n        },\n        []\n    );\n\n    const bind = useDrag(\n        ({ event, offset: [,], xy: [x, y], first, last }) => {\n            const pos = get3DPosition({ screenX: mouse.x, screenY: mouse.y, camera });\n            const positionHasChanged =\n                Math.abs(pos.x - initX) > 0.05 && Math.abs(pos.y - initY) > 0.05;\n\n            if (first) {\n                body.mass = 0;\n                body.updateMassProperties();\n                initX = pos.x;\n                initY = pos.y;\n            } else if (last) {\n                body.mass = 5;\n                body.updateMassProperties();\n\n                if (positionHasChanged) {\n                    props.logPositionChange(key, body.position);\n                } else {\n                    props.logSelection(key, props.identity);\n                }\n            }\n\n            if (!first && positionHasChanged) {\n                body.position.set(pos.x, pos.y, -0.7);\n            }\n        },\n        { pointerEvents: true }\n    );\n\n    useFrame(() => {\n        // Sync cannon body position with three js\n        const deltaX = Math.abs(body.position.x - position.x);\n        const deltaY = Math.abs(body.position.y - position.y);\n        const deltaZ = Math.abs(body.position.z - position.z);\n        if (deltaX > 0.001 || deltaY > 0.001 || deltaZ > 0.001) {\n            setPosition(body.position.clone());\n        }\n        const bodyQuaternion = body.quaternion.toArray();\n        const quaternionDelta = bodyQuaternion\n            .map((n, idx) => Math.abs(n - quaternion[idx]))\n            .reduce((acc, curr) => acc + curr);\n        if (quaternionDelta > 0.01) {\n            setQuaternion(body.quaternion.toArray());\n        }\n    });\n    // {/*rgb(75,110,222)*/}\n\n    return (\n        <mesh\n            onPointerOver={(e) => setHover(true)}\n            onPointerOut={(e) => setHover(false)}\n            ref={ref}\n            castShadow={true}\n            receiveShadow={false}\n            position={[position.x, position.y, position.z]}\n            quaternion={quaternion}\n            {...bind()}\n            onClick={(e) => {\n                e.stopPropagation();\n            }}\n        >\n            <dodecahedronBufferGeometry attach=\"geometry\" />\n            <meshLambertMaterial\n                attach=\"material\"\n                color={hovered ? \"rgb(61,96,221)\" : props.identity.color}\n            />\n\n            <Html scaleFactor={50}>\n                <div className=\"content\">\n                    {props.active && <status-indicator active pulse />}\n                    {props.identity.humanName}\n                </div>\n            </Html>\n        </mesh>\n    );\n}\nfunction Plane(props) {\n    const { ref } = useCannon({ bodyProps: { mass: 0 } }, (body) => {\n        body.addShape(new CANNON.Plane());\n        body.position.set(...props.position);\n    });\n    return (\n        <mesh\n            ref={ref}\n            receiveShadow\n            position={props.position}\n            onClick={props.onPlaneClick}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n            <meshPhongMaterial attach=\"material\" color=\"#087E8B\" />\n        </mesh>\n    );\n}\nfunction ConfigForm(props) {\n    const onSubmit = (data) => console.log(data);\n\n    return (\n        <form onSubmit={onSubmit}>\n            <label>\n                <span>Tap to Add Mode</span>\n                <Switch\n                    onColor={\"#2b6dea\"}\n                    offColor={\"#bcbcbc\"}\n                    onChange={(checked) => props.changeAddMode(checked)}\n                    checked={props.clickToAdd}\n                />\n            </label>\n            <br />\n\n            <label>\n                <span>Human Name</span>\n                <input\n                    type=\"text\"\n                    placeholder=\"Human Name\"\n                    name=\"Human Name\"\n                    value={props.humanName || \"\"}\n                    onChange={(e) => props.changeHumanName(e.target.value)}\n                />\n            </label>\n            <br />\n\n            <label>\n                <span>Key</span>\n                <input\n                    readOnly\n                    type=\"text\"\n                    placeholder=\"Object Key\"\n                    name=\"Object Key\"\n                    value={props.name || \"\"}\n                />\n            </label>\n            <br />\n\n            <label>\n                <span>Color</span>\n\n                <select\n                    name=\"Color\"\n                    value={props.color || \"\"}\n                    onChange={(e) => props.changeColor(e.target.value)}\n                >\n                    <option value=\"white\">White</option>\n                    <option value=\"#3C3C3C\">Black</option>\n                    <option value=\"#D7263D\">Red</option>\n                    <option value=\"#F5D547\">Yellow</option>\n                </select>\n            </label>\n            <br />\n            <label>\n                <span>Speed</span>\n\n                <input\n                    type=\"range\"\n                    placeholder=\"Rating\"\n                    name=\"Rating\"\n                    value={props.rating || \"\"}\n                    onChange={(e) => props.changeRating(e.target.value)}\n                />\n            </label>\n            <br />\n\n            <label>\n                <span>Delete</span>\n\n                <button type=\"button\" onClick={props.deleteObject}>\n                    Delete\n                </button>\n            </label>\n        </form>\n    );\n}\nfunction Index(props) {\n    const { mouse, camera } = useThree();\n\n    const onPlaneClick = (e) => {\n        const position = get3DPosition({\n            screenX: mouse.x,\n            screenY: mouse.y,\n            camera,\n        });\n        props.handlePlaneClick(position);\n    };\n\n    const mouseWheel = (e) => {\n        let delta = e.wheelDelta;\n        delta = delta / 240;\n        delta = -delta;\n        if (delta <= 0) {\n            delta -= camera.position.z * 0.1;\n        } else {\n            delta += camera.position.z * 0.1;\n        }\n        if (camera.position.z + delta > 1 && camera.position.z + delta < 200) {\n            camera.translateZ(delta);\n        }\n    };\n\n    useEventListener(\"wheel\", mouseWheel);\n\n    return (\n        <React.Fragment>\n            <Provider>\n                <ambientLight intensity={0.75} />\n                <spotLight\n                    castShadow={true}\n                    intensity={0.8}\n                    position={[0, -50, 200]}\n                    angle={Math.PI / 15}\n                    penumbra={1}\n                />\n\n                {props.objects.map((t) => (\n                    <DraggableDodecahedron\n                        key={t.id}\n                        identity={t}\n                        active={t.id === props.chosen}\n                        logPositionChange={props.logPositionChange}\n                        logSelection={props.logSelection}\n                    />\n                ))}\n\n                <Plane position={[0, 0, -5]} onPlaneClick={onPlaneClick} />\n            </Provider>\n        </React.Fragment>\n    );\n}\nfunction CameraControls(props) {\n    const {\n        camera,\n        gl: { domElement },\n    } = useThree();\n\n    const controls = useRef();\n\n    return (\n        <orbitControls\n            ref={controls}\n            enabled={!props.selectedSomething}\n            enablePan={false}\n            minAzimuthAngle={0}\n            maxAzimuthAngle={0}\n            minPolarAngle={Math.PI / 2}\n            maxPolarAngle={(Math.PI * 9.5) / 10}\n            minDistance={50}\n            maxDistance={100}\n            args={[camera, domElement]}\n        />\n    );\n}\n\nconst unboxAPIConfigObject = (objData) => {\n    if (objData._id && objData.humanName && objData.position && objData.color) {\n        return {\n            id: objData._id,\n            position: objData.position,\n            humanName: objData.humanName,\n            color: objData.color,\n        };\n    }\n    return {};\n};\nconst get3DPosition = ({ screenX, screenY, camera }) => {\n    var vector = new THREE.Vector3(screenX, screenY, 0.5);\n    vector.unproject(camera);\n    var dir = vector.sub(camera.position).normalize();\n    var distance = -camera.position.z / dir.z;\n    return camera.position.clone().add(dir.multiplyScalar(distance));\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            objects: [],\n            chosen: \"\",\n            humanName: \"\",\n            color: \"\",\n            rating: 0,\n            clickToAdd: true,\n            loading: true,\n        };\n    }\n\n    async fetchObjects() {\n        console.log(\"Fetching objects\");\n\n        try {\n            const response = await axios.get(`${URLs.baseURL}`);\n\n            if (response.status === 200) {\n                // console.log(response.data);\n\n                let objects = response.data.map((t) => unboxAPIConfigObject(t));\n\n                objects = objects.filter(function (el) {\n                    return el.id != null;\n                });\n\n                this.setState({\n                    objects: objects,\n                    loading: false,\n                });\n            } else {\n                alert(response.data.message);\n            }\n        } catch (error) {\n            console.log(\"Error with fetching: \", error);\n        }\n    }\n\n    componentDidMount = async () => {\n        socket.on(\"connect\", () => {\n            console.log(\"got connection\");\n\n            this.fetchObjects();\n\n            socket.on(\"disconnect\", () => {\n                console.log(\"lost connection\");\n                this.setState({ loading: true });\n            });\n        });\n\n        socket.on(\"newRobot\", (realtimeUpdate) => {\n            console.log(\"got new robot from server\", realtimeUpdate);\n\n            const objData = realtimeUpdate.document;\n\n            const newObj = {\n                id: objData._id,\n                position: objData.position,\n                humanName: objData.humanName,\n                color: objData.color,\n            };\n\n            toast.dark(\"Created \" + newObj.humanName);\n\n            this.setState((state) => ({\n                objects: [...state.objects, newObj],\n            }));\n        });\n\n        socket.on(\"deletedRobot\", (realtimeUpdate) => {\n            let objects = [...this.state.objects];\n            let index = 0;\n\n            let _ = objects.find((o, i) => {\n                if (o.id === realtimeUpdate.id) {\n                    index = i;\n                    return true; // stop searching\n                }\n            });\n\n            const item = objects.splice(index, 1)[0];\n\n            this.setState({ objects: objects }, function () {\n                if (item.id === this.state.chosen) {\n                    this.setState({\n                        chosen: \"\",\n                        humanName: \"\",\n                        color: \"\",\n                        rating: 0,\n                    });\n                }\n\n                toast.error(\"Deleted \" + item.humanName);\n            });\n        });\n\n        socket.on(\"modifiedRobot\", (realtimeUpdate) => {\n            let objects = [...this.state.objects];\n            let index = 0;\n\n            let _ = objects.find((o, i) => {\n                if (o.id === realtimeUpdate.id) {\n                    let item = { ...objects[i] };\n                    item = { ...item, ...realtimeUpdate.updatedFields };\n                    objects[i] = item;\n                    index = i;\n                    return true; // stop searching\n                }\n            });\n\n            const item = objects.splice(index, 1)[0];\n\n            this.setState({ objects: objects }, function () {\n                if (item.id === this.state.chosen) {\n                    this.setState(\n                        {\n                            objects: [...objects, item],\n                            chosen: item.id,\n                            humanName: item.humanName,\n                            color: item.color,\n                            rating: item.rating,\n                        },\n                        function () {\n                            toast.warn(\"Modified \" + item.humanName);\n                        }\n                    );\n                } else {\n                    this.setState({ objects: [...objects, item] }, function () {\n                        toast.warn(\"Modified \" + item.humanName);\n                    });\n                }\n            });\n        });\n    };\n\n    logSelection = (key, identity) => {\n        console.log(key, \"now selected\");\n\n        this.setState({\n            chosen: key,\n            humanName: identity.humanName,\n            color: identity.color,\n            rating: identity.rating,\n        });\n    };\n\n    logPositionChange = async (key, position) => {\n        console.log(key, \"changed\", position);\n        if (!key || !position) {\n            return;\n        }\n        try {\n            const response = await axios.put(`${URLs.baseURL}\\\\${key}`, {\n                position: position,\n            });\n        } catch (error) {\n            console.log(\"Error with changing location: \", error);\n        }\n    };\n\n    logCreation = async (newObj) => {\n        if (!newObj) {\n            return;\n        }\n\n        try {\n            await axios.post(`${URLs.baseURL}`, {\n                humanName: newObj.humanName,\n                color: newObj.color,\n                position: newObj.position,\n            });\n        } catch (error) {\n            console.log(\"Error with creating object: \", error);\n        }\n    };\n\n    handlePlaneClick(position) {\n        if (this.state.chosen) {\n            this.setState({\n                chosen: \"\",\n                humanName: \"\",\n                color: \"\",\n                rating: 0,\n            });\n        } else if (this.state.clickToAdd) {\n            const addedObject = {\n                humanName: humanNames.allRandomEn(),\n                position: position,\n                color: \"white\",\n            };\n\n            this.logCreation(addedObject);\n        }\n    }\n\n    async deleteObject() {\n        if (!this.state.chosen) {\n            return;\n        }\n\n        try {\n            const response = await axios.delete(\n                `${URLs.baseURL}\\\\${this.state.chosen}`\n            );\n        } catch (error) {\n            console.log(\"Error with deleting object: \", error);\n        }\n    }\n\n    async updateObject(prop) {\n        if (!prop.key) {\n            return;\n        }\n\n        try {\n            const response = await axios.put(`${URLs.baseURL}\\\\${prop.key}`, {\n                humanName: prop.humanName,\n                color: prop.color,\n                rating: prop.rating,\n            });\n        } catch (error) {\n            console.log(\"Error with editing object: \", error);\n        }\n    }\n\n    changeHumanName = (newName) => {\n        this.updateObject({ key: this.state.chosen, humanName: newName });\n    };\n\n    changeColor = (newColor) => {\n        this.updateObject({ key: this.state.chosen, color: newColor });\n    };\n\n    changeRating = (newRating) => {\n        this.updateObject({ key: this.state.chosen, rating: newRating });\n    };\n\n    changeAddMode = (addMode) => {\n        this.setState({ clickToAdd: addMode });\n    };\n\n    render() {\n        return (\n            <>\n                <LoadingScreen\n                    loading={this.state.loading}\n                    bgColor=\"#f1f1f1\"\n                    spinnerColor=\"#9ee5f8\"\n                    textColor=\"#676767\"\n                    logoSrc=\"/logo512.png\"\n                    text=\"\"\n                >\n                    Loaded\n                </LoadingScreen>\n\n                <Canvas\n                    camera={{ fov: 45, position: [0, -70, 30] }}\n                    onCreated={({ gl }) => {\n                        gl.setPixelRatio(window.devicePixelRatio || 2);\n                        gl.shadowMap.enabled = true;\n                        gl.shadowMap.type = THREE.PCFSoftShadowMap;\n                    }}\n                >\n                    {isBrowser && (\n                        <CameraControls selectedSomething={this.state.chosen !== \"\"} />\n                    )}\n\n                    <Index\n                        chosen={this.state.chosen}\n                        objects={this.state.objects}\n                        logPositionChange={this.logPositionChange.bind(this)}\n                        logSelection={this.logSelection.bind(this)}\n                        handlePlaneClick={this.handlePlaneClick.bind(this)}\n                    />\n                </Canvas>\n\n                <ConfigForm\n                    name={this.state.chosen}\n                    humanName={this.state.humanName}\n                    changeHumanName={this.changeHumanName.bind(this)}\n                    color={this.state.color}\n                    changeColor={this.changeColor.bind(this)}\n                    rating={this.state.rating}\n                    changeRating={this.changeRating.bind(this)}\n                    deleteObject={this.deleteObject.bind(this)}\n                    changeAddMode={this.changeAddMode.bind(this)}\n                    clickToAdd={this.state.clickToAdd}\n                />\n\n                <ToastContainer\n                    position={(isBrowser && \"top-right\") || \"bottom-left\"}\n                    autoClose={2000}\n                    hideProgressBar={true}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss={false}\n                    draggable\n                    pauseOnHover\n                />\n            </>\n        );\n    }\n}\n\nif (module.hot) {\n    module.hot.accept();\n}\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n",["28","29"],"/Users/ahmedaldulaimy/Documents/mothership/client/src/useCannon.js",[],"/Users/ahmedaldulaimy/Documents/mothership/client/src/urls.js",[],"/Users/ahmedaldulaimy/Documents/mothership/client/src/serviceWorkerRegistration.js",[],{"ruleId":"30","severity":1,"message":"31","line":35,"column":17,"nodeType":"32","messageId":"33","endLine":35,"endColumn":18},{"ruleId":"30","severity":1,"message":"31","line":396,"column":17,"nodeType":"32","messageId":"33","endLine":396,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":396,"column":41,"nodeType":"36","messageId":"37","endLine":396,"endColumn":43},{"ruleId":"30","severity":1,"message":"31","line":423,"column":17,"nodeType":"32","messageId":"33","endLine":423,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":423,"column":41,"nodeType":"36","messageId":"37","endLine":423,"endColumn":43},{"ruleId":"30","severity":1,"message":"38","line":475,"column":19,"nodeType":"32","messageId":"33","endLine":475,"endColumn":27},{"ruleId":"30","severity":1,"message":"38","line":524,"column":19,"nodeType":"32","messageId":"33","endLine":524,"endColumn":27},{"ruleId":"30","severity":1,"message":"38","line":538,"column":19,"nodeType":"32","messageId":"33","endLine":538,"endColumn":27},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'response' is assigned a value but never used.","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]